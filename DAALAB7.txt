/* Program : 7 From a given vertex in a weighted connected graph, find shortest paths to other 
vertices using Dijkstra's algorithm. Write the program in Java. */

import java.util.*;
public class dijkstras
{
static final int MAX=20;
static final int infinity=999;
static int n;
static int a[][];
static Scanner scan = new Scanner(System.in);
public static void main(String args[])
{
readmatrix();
int source=0;
System.out.println("Enter starting vertex");
source=scan.nextInt();
dijkstras(source);
}
static void readmatrix()
{
a=new int[MAX][MAX];
System.out.println("Enter number of vertices");
n=scan.nextInt();
System.out.println("Enter cost matrix");
for(int i=1;i<=n;i++)
for(int j=1;j<=n;j++)
a[i][j]=scan.nextInt();
}
static void dijkstras(int source)
{
int visited[]=new int[MAX];
int d[]=new int[MAX];
int u,v,i;
for(i=1;i<=n;i++)
{
visited[i]=0;
d[i]=a[source][i];
}
visited[source]=1;
d[source]=1;
i=2;
while(i<=n)
{
u=min(visited,d);
visited[u]=1;
i++;
for(v=1;v<=n;v++)
{
if((d[u]+a[u][v])<d[v]&&(visited[v]==0))
d[v]=d[u]+a[u][v];
}
}
System.out.println("Shortest path from source="+source+"\n");
System.out.println("src->dest|cost");
for(i=1;i<=n;i++)
if(i!=source)
System.out.println(" "+(source)+"->"+(i)+"|"+(d[i]));
}
static int min(int visited[],int d[])
{
int i,j=1,min=infinity;
for(i=1;i<=n;i++)
{
if(d[i]<min&&visited[i]==0)
{
min=d[i];
j=i;
}
}
return (j);
}
}