/* Program : 4 Sort a given set of n integer elements using Quick Sort method and compute its time 
complexity. Run the program for varied values of n> 5000 and record the time taken to 
sort. Plot a graph of the time taken versus non graph sheet. The elements can be read 
from a file or can be generated using the random number generator. Demonstrate using Java how the divide-and-conquer method works along with its time complexity 
analysis: worst case, average case and best case. */



import java.util.Scanner;
import java.util.Random;
public class quicksort
{
static final int MAX = 20000;
static int a[]=new int[MAX];
public static void main(String args[])
{
Scanner scan = new Scanner(System.in);
int n,i=0;
System.out.println("Enter maximum array size");
n = scan.nextInt();
Random random = new Random();
for(i=0;i<n;i++)
a[i]=random.nextInt(500);
System.out.println("Array elements");
for(i=0;i<n;i++)
System.out.print(a[i]+" ");
System.out.println();
long startTime = System.nanoTime();
quicksortalgorithm(a,0,n-1);
long stopTime = System.nanoTime();
long elapsedTime = stopTime - startTime;
System.out.println("Sorted array");
for(i=0;i<n;i++)
System.out.print(a[i]+" ");
System.out.println("Time complexity in ms for n = "+ (double) elapsedTime/1000000);
}
public static void quicksortalgorithm(int a[],int low,int high)
{
int mid;
if(low<high)
{
mid= Partition(a,low,high);
quicksortalgorithm(a,low,mid-1);
quicksortalgorithm(a,mid+1,high);
}
}
public static int Partition(int a[],int low,int high)
{
int i=low,j=high+1,pivot=a[low],temp;
while(i<=j)
{
do
{
i++;
}while(i<=high&&a[i]<=pivot);
do
{
j--;
}while(a[j]>pivot);
if(i<j)
{
temp=a[i];
a[i]=a[j];
a[j]=temp;
}
}
temp=a[low];
a[low]= a[j];
a[j]=temp;
return j;
}
}
