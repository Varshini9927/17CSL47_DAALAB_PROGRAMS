/* Program : 8 Find Minimum Cost Spanning Tree of a given connected undirected graph using 
Kruskal's algorithm. Use Union-Find algorithms in your program. */


import java.util.*;
public class kruskals
{
final static int MAX=20;
static Scanner scan=new Scanner(System.in);
public static void union(int i,int j,int s[])
{
if(i<j)
s[j]=i;
else
s[i]=j;
}
public static int find(int v,int s[])
{
while(s[v]!=v)
v=s[v];
return v;
}
public static void kruskals(int n,int c[][])
{
int min,count,sum,i,j,k,u=0,v=0;
int s[]=new int[10];
int t[][]=new int[10][2];
for(i=0;i<n;i++)
s[i]=i;
count=0;
sum=0;
k=0;
while(count<n-1)
{
min=999;
for(i=0;i<n;i++)
{
for(j=0;j<n;j++)
{
if(c[i][j]!=0&&c[i][j]<min)
{
min=c[i][j];
u=i;
v=j;
}
}
}
if(min==999)
break;
i=find(u,s);
j=find(v,s);
if(i!=j)
{
t[k][0]=u;
t[k][1]=v;
k++;
count++;
sum=sum+min;
union(i,j,s);
}
c[u][v]=c[v][u]=999;
}
if(count==n-1)
{
System.out.println("Cost of Spanning tree="+sum);
System.out.println("Spanning tree");
System.out.println("--------------");
for(k=0;k<n-1;k++)
System.out.println(t[k][0]+","+t[k][1]);
}
else
System.out.println("Spanning tree doesnot exist");
}
public static void main(String args[])
{
int c[][]=new int[MAX][MAX];
System.out.println("Enter number of nodes");
int n=scan.nextInt();
System.out.println("Enter cost adjacency matrix");
for(int i=0;i<n;i++)
for(int j=0;j<n;j++)
c[i][j]=scan.nextInt();
kruskals(n,c);
}
}
