/* Program : 6 Implement in Java, the 0/1 Knapsack problem using (a) Dynamic Programming 
method (b) Greedy method. */

import java.util.*;
class kobject
{
float w;
float p;
float r;
}
public class knapsack
{
static final int MAX=20;
static int n;
static float M;
static Scanner scan=new Scanner(System.in);
public static void main(String args[])
{
System.out.println("Enter the number of objects");
n=scan.nextInt();
kobject obj[]=new kobject[n];
for(int i=0;i<n;i++)
obj[i]=new kobject();
readobject(obj);
knapsack(obj);
}
static void readobject(kobject obj[])
{
kobject temp = new kobject();
System.out.println("Enter the maximum capacity ");
M=scan.nextFloat();
System.out.println("Enter the profit");
for(int i=0;i<n;i++)
obj[i].p=scan.nextFloat();
System.out.println("Enter the weights");
for(int i=0;i<n;i++)
obj[i].w=scan.nextFloat();
for(int i=0;i<n;i++)
obj[i].r=obj[i].p/obj[i].w;
for(int i=0;i<n-1;i++)
for(int j=0;j<n-1;j++)
if(obj[j].r<obj[j+1].r)
{
temp=obj[j];
obj[j]=obj[j+1];
obj[j+1]=temp;
}
}
static void knapsack(kobject kobj[])
{
float x[]=new float[MAX];
float totalprofit=0,rc=M;
int i;
for(i=0;i<n;i++)
x[i]=0;
for(i=0;i<n;i++)
{
if(kobj[i].w>rc)
break;
else
{
x[i]=1;
totalprofit=totalprofit+kobj[i].p;
rc=rc-kobj[i].w;
}
}
if(i<n)
x[i]=rc/kobj[i].w;
totalprofit=totalprofit+(x[i]*kobj[i].p);
System.out.println("The solution ");
for(i=0;i<n;i++)
System.out.println("x["+(i+1)+")"+x[i]);
System.out.println("Totalprofit = "+totalprofit);
}
}

