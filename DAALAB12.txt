/* Program : 12 Design and implement in Java to find all Hamiltonian Cycles in a connected 
undirected Graph G of n vertices using backtracking principle. */

import java.util.*;
public class hamiltonian
{
boolean found=false;
int g[][];
int x[];
int n;
public static void main(String args[])
{
hamiltonian h=new hamiltonian();
h.getdata();
System.out.println("Solution");
h.hamiltonianmethod(2);
h.printnoslnpossible();
}
public void printnoslnpossible()
{
if(found==false)
System.out.println("No solution possible");
}
public void getdata()
{
Scanner scan =new Scanner(System.in);
System.out.println("Enter number of vertices");
n=scan.nextInt();
g=new int[n+1][n+1];
x=new int[n+1];
System.out.println("If edge exists enter 1 else enter 0");
for(int i=1;i<=n;i++)
for(int j=1;j<=n;j++)
{
if((i!=j)&&(i<j))
{
System.out.print("edge from "+i+" to "+j+":");
g[j][i]=g[i][j]=scan.nextInt();
}
if(i==j)
g[i][j]=0;
}
for(int i=0;i<=n;i++)
x[i]=0;
x[1]=1;
}
void hamiltonianmethod(int k)
{
while(true)
{
nextvalue(k,g,x,n);
if(x[k]==0)
return;
if(k==n)
{
for(int i=1;i<=k;i++)
System.out.print(x[i]+"->");
System.out.println(x[1]);
found=true;
return;
}
else
hamiltonianmethod(k+1);
}
}
void nextvalue(int k,int g[][],int x[],int n)
{
while(true)
{
x[k]=(x[k]+1)%(n+1);
if(x[k]==0)
return;
if(g[x[k-1]][x[k]]!=0)
{
int j;
for(j=1;j<k;j++)
if(x[k]==x[j])
break;
if(j==k)
if((k<n)||((k==n)&&(g[x[n]][x[1]]!=0)))
return;
}
}
}
}
